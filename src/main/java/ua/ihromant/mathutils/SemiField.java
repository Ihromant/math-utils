package ua.ihromant.mathutils;

import java.util.stream.IntStream;

public class SemiField {
    public static final int SIZE = SemiFieldGen.SIZE;
    public static final int ZERO = SemiFieldGen.ZR;
    public static final int ONE = SemiFieldGen.ONE;

    private static final int[][] ADDITION_TABLE = {
            {26, 24, 25, 20, 18, 19, 23, 21, 22,  8,  6,  7,  2,  0,  1,  5,  3,  4, 17, 15, 16, 11,  9, 10, 14, 12, 13},
            {24, 25, 26, 18, 19, 20, 21, 22, 23,  6,  7,  8,  0,  1,  2,  3,  4,  5, 15, 16, 17,  9, 10, 11, 12, 13, 14},
            {25, 26, 24, 19, 20, 18, 22, 23, 21,  7,  8,  6,  1,  2,  0,  4,  5,  3, 16, 17, 15, 10, 11,  9, 13, 14, 12},
            {20, 18, 19, 23, 21, 22, 26, 24, 25,  2,  0,  1,  5,  3,  4,  8,  6,  7, 11,  9, 10, 14, 12, 13, 17, 15, 16},
            {18, 19, 20, 21, 22, 23, 24, 25, 26,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17},
            {19, 20, 18, 22, 23, 21, 25, 26, 24,  1,  2,  0,  4,  5,  3,  7,  8,  6, 10, 11,  9, 13, 14, 12, 16, 17, 15},
            {23, 21, 22, 26, 24, 25, 20, 18, 19,  5,  3,  4,  8,  6,  7,  2,  0,  1, 14, 12, 13, 17, 15, 16, 11,  9, 10},
            {21, 22, 23, 24, 25, 26, 18, 19, 20,  3,  4,  5,  6,  7,  8,  0,  1,  2, 12, 13, 14, 15, 16, 17,  9, 10, 11},
            {22, 23, 21, 25, 26, 24, 19, 20, 18,  4,  5,  3,  7,  8,  6,  1,  2,  0, 13, 14, 12, 16, 17, 15, 10, 11,  9},
            { 8,  6,  7,  2,  0,  1,  5,  3,  4, 17, 15, 16, 11,  9, 10, 14, 12, 13, 26, 24, 25, 20, 18, 19, 23, 21, 22},
            { 6,  7,  8,  0,  1,  2,  3,  4,  5, 15, 16, 17,  9, 10, 11, 12, 13, 14, 24, 25, 26, 18, 19, 20, 21, 22, 23},
            { 7,  8,  6,  1,  2,  0,  4,  5,  3, 16, 17, 15, 10, 11,  9, 13, 14, 12, 25, 26, 24, 19, 20, 18, 22, 23, 21},
            { 2,  0,  1,  5,  3,  4,  8,  6,  7, 11,  9, 10, 14, 12, 13, 17, 15, 16, 20, 18, 19, 23, 21, 22, 26, 24, 25},
            { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26},
            { 1,  2,  0,  4,  5,  3,  7,  8,  6, 10, 11,  9, 13, 14, 12, 16, 17, 15, 19, 20, 18, 22, 23, 21, 25, 26, 24},
            { 5,  3,  4,  8,  6,  7,  2,  0,  1, 14, 12, 13, 17, 15, 16, 11,  9, 10, 23, 21, 22, 26, 24, 25, 20, 18, 19},
            { 3,  4,  5,  6,  7,  8,  0,  1,  2, 12, 13, 14, 15, 16, 17,  9, 10, 11, 21, 22, 23, 24, 25, 26, 18, 19, 20},
            { 4,  5,  3,  7,  8,  6,  1,  2,  0, 13, 14, 12, 16, 17, 15, 10, 11,  9, 22, 23, 21, 25, 26, 24, 19, 20, 18},
            {17, 15, 16, 11,  9, 10, 14, 12, 13, 26, 24, 25, 20, 18, 19, 23, 21, 22,  8,  6,  7,  2,  0,  1,  5,  3,  4},
            {15, 16, 17,  9, 10, 11, 12, 13, 14, 24, 25, 26, 18, 19, 20, 21, 22, 23,  6,  7,  8,  0,  1,  2,  3,  4,  5},
            {16, 17, 15, 10, 11,  9, 13, 14, 12, 25, 26, 24, 19, 20, 18, 22, 23, 21,  7,  8,  6,  1,  2,  0,  4,  5,  3},
            {11,  9, 10, 14, 12, 13, 17, 15, 16, 20, 18, 19, 23, 21, 22, 26, 24, 25,  2,  0,  1,  5,  3,  4,  8,  6,  7},
            { 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,  0,  1,  2,  3,  4,  5,  6,  7,  8},
            {10, 11,  9, 13, 14, 12, 16, 17, 15, 19, 20, 18, 22, 23, 21, 25, 26, 24,  1,  2,  0,  4,  5,  3,  7,  8,  6},
            {14, 12, 13, 17, 15, 16, 11,  9, 10, 23, 21, 22, 26, 24, 25, 20, 18, 19,  5,  3,  4,  8,  6,  7,  2,  0,  1},
            {12, 13, 14, 15, 16, 17,  9, 10, 11, 21, 22, 23, 24, 25, 26, 18, 19, 20,  3,  4,  5,  6,  7,  8,  0,  1,  2},
            {13, 14, 12, 16, 17, 15, 10, 11,  9, 22, 23, 21, 25, 26, 24, 19, 20, 18,  4,  5,  3,  7,  8,  6,  1,  2,  0},
    };

    private static final int[][] MULTIPLICATION_TABLE = {
            { 2,  3,  7, 22, 26, 18, 15, 10, 14, 25, 20, 21,  9, 13, 17,  5,  6,  1, 12, 16, 11,  8,  0,  4, 19, 23, 24},
            { 3, 20, 16,  2, 25, 12,  7, 21, 11, 18, 17,  4, 26, 13,  0, 22,  9,  8, 15,  5, 19, 14,  1, 24, 10,  6, 23},
            { 7, 16, 25, 15, 24,  6, 26,  8, 17, 23,  5, 14,  4, 13, 22, 12, 21,  3,  9, 18,  0, 20,  2, 11,  1, 10, 19},
            {22,  2, 15, 16, 23,  0,  1, 17, 21, 12, 19,  8,  6, 13, 20, 18,  7, 14,  5,  9, 25, 26,  3, 10, 11, 24,  4},
            {26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0},
            {18, 12,  6,  0, 21, 15,  9,  3, 24, 10,  4, 25, 19, 13,  7,  1, 22, 16,  2, 23, 17, 11,  5, 26, 20, 14,  8},
            {15,  7, 26,  1, 20,  9, 23, 12,  4,  2, 18, 10, 21, 13,  5, 16,  8, 24, 22, 14,  3, 17,  6, 25,  0, 19, 11},
            {10, 21,  8, 17, 19,  3, 12, 26,  1,  4, 15, 20,  2, 13, 24,  6, 11, 22, 25,  0, 14, 23,  7,  9, 18,  5, 16},
            {14, 11, 17, 21, 18, 24,  4,  1,  7,  6,  3,  0, 16, 13, 10, 26, 23, 20, 19, 25, 22,  2,  8,  5,  9, 15, 12},
            {25, 18, 23, 12, 17, 10,  2,  4,  6, 21, 26, 19, 11, 13, 15,  7,  0,  5, 20, 22, 24, 16,  9, 14,  3,  8,  1},
            {20, 17,  5, 19, 16,  4, 18, 15,  3, 26, 14,  2, 25, 13,  1, 24, 12,  0, 23, 11,  8, 22, 10,  7, 21,  9,  6},
            {21,  4, 14,  8, 15, 25, 10, 20,  0, 19,  2,  9,  3, 13, 23, 17, 24,  7, 26,  6, 16,  1, 11, 18, 12, 22,  5},
            { 9, 26,  4,  6, 14, 19, 21,  2, 16, 11, 25,  3,  8, 13, 18, 23,  1, 15, 10, 24,  5,  7, 12, 20, 22,  0, 17},
            {13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
            {17,  0, 22, 20, 12,  7,  5, 24, 10, 15,  1, 23, 18, 13,  8,  3, 25, 11, 16,  2, 21, 19, 14,  6,  4, 26,  9},
            { 5, 22, 12, 18, 11,  1, 16,  6, 26,  7, 24, 17, 23, 13,  3,  9,  2, 19,  0, 20, 10, 25, 15,  8, 14,  4, 21},
            { 6,  9, 21,  7, 10, 22,  8, 11, 23,  0, 12, 24,  1, 13, 25,  2, 14, 26,  3, 15, 18,  4, 16, 19,  5, 17, 20},
            { 1,  8,  3, 14,  9, 16, 24, 22, 20,  5,  0,  7, 15, 13, 11, 19, 26, 21,  6,  4,  2, 10, 17, 12, 23, 18, 25},
            {12, 15,  9,  5,  8,  2, 22, 25, 19, 20, 23, 26, 10, 13, 16,  0,  3,  6,  7,  1,  4, 24, 18, 21, 17, 11, 14},
            {16,  5, 18,  9,  7, 23, 14,  0, 25, 22, 11,  6, 24, 13,  2, 20, 15,  4,  1, 26, 12,  3, 19, 17,  8, 21, 10},
            {11, 19,  0, 25,  6, 17,  3, 14, 22, 24,  8, 16,  5, 13, 21, 10, 18,  2,  4, 12, 23,  9, 20,  1, 26,  7, 15},
            { 8, 14, 20, 26,  5, 11, 17, 23,  2, 16, 22,  1,  7, 13, 19, 25,  4, 10, 24,  3,  9, 15, 21,  0,  6, 12, 18},
            { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26},
            { 4, 24, 11, 10,  3, 26, 25,  9,  5, 14,  7, 18, 20, 13,  6,  8, 19, 12, 21, 17,  1,  0, 23, 16, 15,  2, 22},
            {19, 10,  1, 11,  2, 20,  0, 18,  9,  3, 21, 12, 22, 13,  4, 14,  5, 23, 17,  8, 26,  6, 24, 15, 25, 16,  7},
            {23,  6, 10, 24,  1, 14, 19,  5, 15,  8,  9, 22,  0, 13, 26,  4, 17, 18, 11, 21,  7, 12, 25,  2, 16, 20,  3},
            {24, 23, 19,  4,  0,  8, 11, 16, 12,  1,  6,  5, 17, 13,  9, 21, 20, 25, 14, 10, 15, 18, 26, 22,  7,  3,  2},
    };

    private static final int[] NEGATION_TABLE = {26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0};

    private static final int[] INVERSE_TABLE = { 3, 15, 14,  0,  4, 16, 18, 17, 20, 19, 21, 25, 24, 13,  2,  1,  5,  7,  6,  9,  8, 10, 22, 26, 12, 11, 23};

    public static int add(int a, int b) {
        return ADDITION_TABLE[a][b];
    }

    public static int neg(int a) {
        return NEGATION_TABLE[a];
    }

    public static int mul(int a, int b) {
        return MULTIPLICATION_TABLE[a][b];
    }

    public static int sub(int a, int b) {
        return add(a, neg(b));
    }

    public static int inv(int a) {
        if (a == ZERO) {
            throw new IllegalArgumentException();
        }
        return INVERSE_TABLE[a];
    }

    public static String toString(int a) {
        return SemiFieldGen.toString(a);
    }

    public static int parse(String from) {
        return IntStream.range(0, SIZE).filter(i -> from.equals(toString(i))).findAny().orElseThrow();
    }
}
